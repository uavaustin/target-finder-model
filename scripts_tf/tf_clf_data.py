# Adapted from https://github.com/tensorflow/models/blob/master/research/object_detection/dataset_tools/create_coco_tf_record.py
# Copyright 2017 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""
AFTER running create_full_images.py and create_detection_data.py:

$ python scripts_tf/create_tf_records.py --image_dir=./scripts_generate/data --output_dir=model_data/clf_records
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import matplotlib.image as mpimg
import io
import gzip
import json
import os
import contextlib2
import numpy as np
from PIL import Image
import glob

import tensorflow as tf

from object_detection.dataset_tools import tf_record_creation_util
from object_detection.utils import dataset_util

with open(os.path.join(os.path.dirname(__file__), 
        os.pardir, 'config.yaml'), 'r') as stream:
    import yaml
    config = yaml.safe_load(stream)

CLASSES = {
  'background': 0,
  'target':     1
}

flags = tf.app.flags
tf.flags.DEFINE_string('image_dir', 'scripts_generate/data',
                       'Training image directory.')
tf.flags.DEFINE_string('output_dir', 'model_data/clf_records', 'Output data directory.')

FLAGS = flags.FLAGS

tf.logging.set_verbosity(tf.logging.INFO)


def create_tf_example(image_path_prefix, image_dir):
  """Converts image and txt annotations to a tf.Example proto."""
  image_id = os.path.basename(image_path_prefix)
  label = CLASSES[image_id.split('_')[0]]
  filename = image_path_prefix + '.png'
  img_shape = mpimg.imread(filename).shape

 # Read image data in terms of bytes
  with tf.gfile.FastGFile(filename, 'rb') as fid:
      image_data = fid.read()
  
  example = tf.train.Example(features = tf.train.Features(feature = {
      'filename': tf.train.Feature(bytes_list = tf.train.BytesList(value = [filename.encode('utf-8')])),
      'rows': tf.train.Feature(int64_list = tf.train.Int64List(value = [img_shape[0]])),
      'cols': tf.train.Feature(int64_list = tf.train.Int64List(value = [img_shape[1]])),
      'channels': tf.train.Feature(int64_list = tf.train.Int64List(value = [img_shape[2]])),
      'image': tf.train.Feature(bytes_list = tf.train.BytesList(value = [image_data])),
      'label': tf.train.Feature(int64_list = tf.train.Int64List(value = [label])),
  }))
  
  return example


def _create_tf_record_from_images(data_dir, output_path):
  """Loads images generated by generate/*.py scripts and converts
  them into tf records.
  """
  # Find number of shards to make. Recommended ~2000 images per shard
  image_paths = glob.glob(data_dir + '/*.png')
  num_shards = len(image_paths) // 2000 + 1

  with contextlib2.ExitStack() as tf_record_close_stack:

    output_tfrecords = tf_record_creation_util.open_sharded_output_tfrecords(
        tf_record_close_stack, output_path, num_shards)

    for idx, image_fn in enumerate(image_paths):

      if idx % 100 == 0:
        tf.logging.info('On image %d of %d', idx, len(image_paths))

      image_path_prefix = image_fn.replace('.png', '')
      tf_example = create_tf_example(image_path_prefix, data_dir)
      shard_idx = idx % num_shards
      output_tfrecords[shard_idx].write(tf_example.SerializeToString())
    tf.logging.info('Finished writing.')

def main(_):

  if not tf.gfile.IsDirectory(FLAGS.output_dir):
    tf.gfile.MakeDirs(FLAGS.output_dir)

  train_output_path = os.path.join(FLAGS.output_dir, 'clf_train.record')
  val_output_path = os.path.join(FLAGS.output_dir, 'clf_val.record')

  _create_tf_record_from_images(
      os.path.join(FLAGS.image_dir, 'clf_train', 'images'), train_output_path)

  _create_tf_record_from_images(
      os.path.join(FLAGS.image_dir, 'clf_val', 'images'), val_output_path)


if __name__ == '__main__':
  
  tf.app.run()